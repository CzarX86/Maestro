# Makefile para orquestrador "magro"
# Uso: make TASK=demo plan|code|integrate|test|report|all

TASK ?= demo
TIMEZONE = America/Sao_Paulo

# Configura√ß√µes de timeout (em segundos)
PLANNER_TIMEOUT = 120
CODER_TIMEOUT = 300
TESTER_TIMEOUT = 600

# Configura√ß√µes de limites
MAX_DIFF_LINES = 1000
MIN_COVERAGE = 70

# Fun√ß√£o para timestamp
ts = $(shell TZ=$(TIMEZONE) date +"%Y-%m-%dT%H:%M:%S%z")

# Fun√ß√£o para logging
log = @echo "[$(1)] $(ts) $(2)"

.PHONY: help plan code integrate test report all clean validate

help:
	@echo "Orquestrador 'magro' - Comandos dispon√≠veis:"
	@echo "  make TASK=<id> plan     - Gerar plano e especifica√ß√£o"
	@echo "  make TASK=<id> code     - Gerar c√≥digo conforme plano"
	@echo "  make TASK=<id> integrate- Aplicar diffs e build local"
	@echo "  make TASK=<id> test     - Executar testes can√¥nicos"
	@echo "  make TASK=<id> report   - Gerar relat√≥rio QA"
	@echo "  make TASK=<id> all      - Executar pipeline completo"
	@echo "  make clean             - Limpar artefatos tempor√°rios"
	@echo ""
	@echo "Exemplo: make TASK=demo all"

validate:
	@echo "Validando ambiente para task=$(TASK)..."
	@test -f issues/$(TASK).md || (echo "‚ùå Issue n√£o encontrado: issues/$(TASK).md"; exit 1)
	@command -v gemini >/dev/null 2>&1 || (echo "‚ùå gemini CLI n√£o encontrado"; exit 1)
	@command -v codex >/dev/null 2>&1 || (echo "‚ùå codex CLI n√£o encontrado"; exit 1)
	@command -v cursor >/dev/null 2>&1 || (echo "‚ùå cursor CLI n√£o encontrado"; exit 1)
	@echo "‚úÖ Ambiente validado"

plan: validate
	$(call log,PLAN,Iniciando planejamento para task=$(TASK))
	@mkdir -p handoff logs
	@timeout $(PLANNER_TIMEOUT) gemini plan \
		--in issues/$(TASK).md \
		--out-json handoff/plan.json \
		--out-spec handoff/spec.md
	@test -f handoff/plan.json || (echo "‚ùå Plano n√£o gerado"; exit 1)
	@test -f handoff/spec.md || (echo "‚ùå Especifica√ß√£o n√£o gerada"; exit 1)
	$(call log,PLAN,Planejamento conclu√≠do)

code: validate
	$(call log,CODE,Iniciando gera√ß√£o de c√≥digo para task=$(TASK))
	@test -f handoff/plan.json || (echo "‚ùå Plano n√£o encontrado - execute 'make plan' primeiro"; exit 1)
	@test -f handoff/spec.md || (echo "‚ùå Especifica√ß√£o n√£o encontrada - execute 'make plan' primeiro"; exit 1)
	@mkdir -p diffs
	@timeout $(CODER_TIMEOUT) codex code \
		--plan handoff/plan.json \
		--spec handoff/spec.md \
		--out .
	$(call log,CODE,Gera√ß√£o de c√≥digo conclu√≠da)

integrate: validate
	$(call log,INTEGRATE,Iniciando integra√ß√£o para task=$(TASK))
	@if [ -f diffs/$(TASK).diff ]; then \
		echo "Aplicando diff: diffs/$(TASK).diff"; \
		diff_size=$$(wc -l < diffs/$(TASK).diff); \
		if [ $$diff_size -gt $(MAX_DIFF_LINES) ]; then \
			echo "‚ùå Diff muito grande: $$diff_size linhas (limite: $(MAX_DIFF_LINES))"; \
			exit 1; \
		fi; \
		cursor apply --from-diff diffs/$(TASK).diff; \
	fi
	@echo "Executando build local..."
	@cursor run "pip install -e ." || echo "‚ö†Ô∏è  Build local falhou - continuando"
	@echo "Executando testes de fuma√ßa..."
	@cursor run "pytest -q tests/smoke || true"
	$(call log,INTEGRATE,Integra√ß√£o conclu√≠da)

test: validate
	$(call log,TEST,Iniciando testes can√¥nicos para task=$(TASK))
	@mkdir -p logs
	@echo "Executando linting..."
	@set +e; \
	ruff_out=$$(ruff check . 2>&1); \
	ruff_rc=$$?; \
	echo "$$ruff_out" > logs/$(TASK).lint.out; \
	set -e
	@echo "Executando type checking..."
	@set +e; \
	mypy_out=$$(mypy src 2>&1); \
	mypy_rc=$$?; \
	echo "$$mypy_out" > logs/$(TASK).types.out; \
	set -e
	@echo "Executando testes unit√°rios/integra√ß√£o..."
	@set +e; \
	pytest_out=$$(pytest -q --maxfail=1 --disable-warnings --cov=src --cov-report=term 2>&1); \
	pytest_rc=$$?; \
	echo "$$pytest_out" > logs/$(TASK).tests.out; \
	set -e
	$(call log,TEST,Testes can√¥nicos conclu√≠dos)

report: validate
	$(call log,REPORT,Gerando relat√≥rio QA para task=$(TASK))
	@mkdir -p reports
	@python3 orchestrator/write_qa.py \
		--task $(TASK) \
		--lint_rc $$(if [ -f logs/$(TASK).lint.out ]; then echo "$$(grep -q "error" logs/$(TASK).lint.out && echo "1" || echo "0")"; else echo "0"; fi) \
		--lint_out "$$(if [ -f logs/$(TASK).lint.out ]; then tail -n 50 logs/$(TASK).lint.out; fi)" \
		--types_rc $$(if [ -f logs/$(TASK).types.out ]; then echo "$$(grep -q "error" logs/$(TASK).types.out && echo "1" || echo "0")"; else echo "0"; fi) \
		--types_out "$$(if [ -f logs/$(TASK).types.out ]; then tail -n 50 logs/$(TASK).types.out; fi)" \
		--tests_rc $$(if [ -f logs/$(TASK).tests.out ]; then echo "$$(grep -q "FAILED" logs/$(TASK).tests.out && echo "1" || echo "0")"; else echo "0"; fi) \
		--tests_out "$$(if [ -f logs/$(TASK).tests.out ]; then tail -n 80 logs/$(TASK).tests.out; fi)"
	@if [ -f reports/qa.json ]; then \
		status=$$(python3 -c "import json; print(json.load(open('reports/qa.json'))['status'])"); \
		if [ "$$status" = "pass" ]; then \
			echo "‚úÖ Task $(TASK) passou em todos os crit√©rios"; \
			echo "üìã Revisar reports/qa.json antes do merge"; \
			echo "üîí Merge requer aprova√ß√£o manual"; \
		else \
			echo "‚ùå Task $(TASK) falhou - verificar reports/qa.json"; \
			echo "üìã Pr√≥ximas a√ß√µes:"; \
			python3 -c "import json; print('\n'.join(json.load(open('reports/qa.json'))['next_actions']))"; \
		fi; \
	fi
	$(call log,REPORT,Relat√≥rio QA conclu√≠do)

all: validate plan code integrate test report
	$(call log,END,Pipeline completo conclu√≠do para task=$(TASK))

clean:
	@echo "Limpando artefatos tempor√°rios..."
	@rm -rf handoff/plan.json handoff/spec.md
	@rm -rf reports/qa.json
	@rm -rf logs/$(TASK).*.log logs/$(TASK).*.out
	@rm -rf diffs/$(TASK).diff
	@echo "‚úÖ Limpeza conclu√≠da"

# Comando para criar issue de exemplo
create-demo:
	@echo "Criando issue de exemplo..."
	@cp issues/TEMPLATE.md issues/demo.md
	@sed -i '' 's/<resuma em 1 linha>/Gerar README.md com documenta√ß√£o do projeto/' issues/demo.md
	@sed -i '' 's/<bullet 1>/Projeto precisa de documenta√ß√£o clara/' issues/demo.md
	@sed -i '' 's/<bullet 2>/README atual est√° desatualizado/' issues/demo.md
	@sed -i '' 's/<resultado esperado em termos observ√°veis>/README.md com se√ß√µes: descri√ß√£o, instala√ß√£o, uso, contribui√ß√£o/' issues/demo.md
	@sed -i '' 's/- <itens>/- README.md principal/' issues/demo.md
	@sed -i '' 's/- <itens>/- Documenta√ß√£o t√©cnica detalhada/' issues/demo.md
	@sed -i '' 's/- <arquivo ou pasta e prop√≥sito>/- README.md: documenta√ß√£o principal do projeto/' issues/demo.md
	@sed -i '' 's/- \[ \] <teste verific√°vel 1>/- [ ] README.md existe e √© leg√≠vel/' issues/demo.md
	@sed -i '' 's/- \[ \] <teste verific√°vel 2>/- [ ] README.md cont√©m se√ß√µes obrigat√≥rias/' issues/demo.md
	@sed -i '' 's/- <risco e mitiga√ß√£o>/- Baixo risco: documenta√ß√£o simples/' issues/demo.md
	@sed -i '' 's/Planner=<seg>, Coder=<seg>, Tester=<seg>/Planner=30, Coder=60, Tester=30/' issues/demo.md
	@sed -i '' 's/<linhas>/50/' issues/demo.md
	@sed -i '' 's/<glob patterns>/README.md/' issues/demo.md
	@echo "‚úÖ Issue demo criado: issues/demo.md"

# Comando para mostrar status
status:
	@echo "üìä Status do orquestrador:"
	@echo "Task atual: $(TASK)"
	@echo "Issue: $$(if [ -f issues/$(TASK).md ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
	@echo "Plano: $$(if [ -f handoff/plan.json ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
	@echo "Especifica√ß√£o: $$(if [ -f handoff/spec.md ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
	@echo "Relat√≥rio QA: $$(if [ -f reports/qa.json ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
	@if [ -f reports/qa.json ]; then \
		status=$$(python3 -c "import json; print(json.load(open('reports/qa.json'))['status'])"); \
		echo "Status final: $$status"; \
	fi
