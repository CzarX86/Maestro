#!/usr/bin/env python3
"""
Teste de fuma√ßa para o orquestrador "magro".
Verifica se os componentes b√°sicos est√£o funcionando.
"""

import json
import os
import sys
from pathlib import Path


def test_directory_structure():
    """Testa se a estrutura de diret√≥rios est√° correta."""
    required_dirs = [
        "issues",
        "handoff", 
        "reports",
        "logs",
        "diffs",
        "src",
        "tests",
        ".cursor",
        "orchestrator",
        "secrets"
    ]
    
    for dir_name in required_dirs:
        if not Path(dir_name).exists():
            print(f"‚ùå Diret√≥rio n√£o encontrado: {dir_name}")
            return False
        print(f"‚úÖ Diret√≥rio encontrado: {dir_name}")
    
    return True


def test_template_files():
    """Testa se os arquivos de template est√£o presentes."""
    required_files = [
        "issues/TEMPLATE.md",
        "handoff/plan.template.json",
        "handoff/spec.template.md",
        "reports/qa.template.json"
    ]
    
    for file_path in required_files:
        if not Path(file_path).exists():
            print(f"‚ùå Template n√£o encontrado: {file_path}")
            return False
        print(f"‚úÖ Template encontrado: {file_path}")
    
    return True


def test_orchestrator_scripts():
    """Testa se os scripts do orquestrador est√£o presentes e execut√°veis."""
    scripts = [
        "orchestrator/orchestrate.sh",
        "orchestrator/write_qa.py"
    ]
    
    for script in scripts:
        script_path = Path(script)
        if not script_path.exists():
            print(f"‚ùå Script n√£o encontrado: {script}")
            return False
        
        if not os.access(script_path, os.X_OK):
            print(f"‚ùå Script n√£o √© execut√°vel: {script}")
            return False
        
        print(f"‚úÖ Script execut√°vel: {script}")
    
    return True


def test_config_files():
    """Testa se os arquivos de configura√ß√£o est√£o presentes e v√°lidos."""
    config_files = [
        "orchestrator/config.json",
        "Makefile"
    ]
    
    for config_file in config_files:
        if not Path(config_file).exists():
            print(f"‚ùå Configura√ß√£o n√£o encontrada: {config_file}")
            return False
        
        # Testa se JSON √© v√°lido
        if config_file.endswith('.json'):
            try:
                with open(config_file, 'r') as f:
                    json.load(f)
                print(f"‚úÖ JSON v√°lido: {config_file}")
            except json.JSONDecodeError:
                print(f"‚ùå JSON inv√°lido: {config_file}")
                return False
        else:
            print(f"‚úÖ Configura√ß√£o encontrada: {config_file}")
    
    return True


def test_demo_issue():
    """Testa se o issue de exemplo est√° presente."""
    demo_issue = Path("issues/demo.md")
    
    if not demo_issue.exists():
        print("‚ùå Issue de exemplo n√£o encontrado")
        return False
    
    # Verifica se tem conte√∫do m√≠nimo
    content = demo_issue.read_text()
    required_sections = ["# Title", "## Contexto", "## Objetivo", "## Crit√©rios de aceita√ß√£o"]
    
    for section in required_sections:
        if section not in content:
            print(f"‚ùå Se√ß√£o obrigat√≥ria n√£o encontrada: {section}")
            return False
    
    print("‚úÖ Issue de exemplo v√°lido")
    return True


def test_security_files():
    """Testa se os arquivos de seguran√ßa est√£o configurados corretamente."""
    # Verifica se .env.example existe mas .env n√£o
    env_example = Path("secrets/env.example")
    env_real = Path("secrets/.env")
    
    if not env_example.exists():
        print("‚ùå secrets/env.example n√£o encontrado")
        return False
    
    if env_real.exists():
        print("‚ö†Ô∏è  secrets/.env encontrado (deve ser ignorado pelo git)")
    
    print("‚úÖ Configura√ß√£o de seguran√ßa v√°lida")
    return True


def main():
    """Executa todos os testes de fuma√ßa."""
    print("üß™ Executando testes de fuma√ßa do orquestrador...\n")
    
    tests = [
        ("Estrutura de diret√≥rios", test_directory_structure),
        ("Arquivos de template", test_template_files),
        ("Scripts do orquestrador", test_orchestrator_scripts),
        ("Arquivos de configura√ß√£o", test_config_files),
        ("Issue de exemplo", test_demo_issue),
        ("Configura√ß√£o de seguran√ßa", test_security_files)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - PASS")
            else:
                print(f"‚ùå {test_name} - FAIL")
        except Exception as e:
            print(f"‚ùå {test_name} - ERROR: {e}")
    
    print(f"\nüìä Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes de fuma√ßa passaram!")
        return 0
    else:
        print("‚ö†Ô∏è  Alguns testes falharam - verifique a configura√ß√£o")
        return 1


if __name__ == "__main__":
    sys.exit(main())
