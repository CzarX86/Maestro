#!/usr/bin/env python3
"""
Generate code files from handoff artifacts.

Reads plan from `handoff/plan.json` and spec from `handoff/spec.md`, then
creates any listed deliverable files that don't yet exist, seeding them with
lightweight headers that reference the plan/spec context.
"""

import json
import sys
from pathlib import Path
from typing import Any, Dict, List


HEADER_LINE = "=" * 78


def load_plan(plan_path: Path) -> Dict[str, Any]:
    try:
        data = json.loads(plan_path.read_text(encoding="utf-8"))
        if not isinstance(data, dict):
            raise ValueError("plan.json must be a JSON object")
        return data
    except Exception as e:
        raise RuntimeError(f"Failed to read plan from {plan_path}: {e}")


def load_spec(spec_path: Path) -> str:
    try:
        return spec_path.read_text(encoding="utf-8")
    except Exception as e:
        raise RuntimeError(f"Failed to read spec from {spec_path}: {e}")


def ensure_file(path: Path, task_id: str, purpose: str, spec: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    if path.exists():
        return

    header = (
        f"{HEADER_LINE}\n"
        f"Generated by handoff for task: {task_id}\n"
        f"Purpose: {purpose or 'n/a'}\n"
        f"Source: handoff/plan.json + handoff/spec.md\n"
        f"{HEADER_LINE}\n\n"
    )

    content: str
    if path.suffix in {".py", ".sh", ".md", ".txt", ".yml", ".yaml", ".json"}:
        if path.suffix == ".py":
            content = (
                f"\"\"\"\n{header}{spec}\n\"\"\"\n\n"
                f"# TODO: Implement according to plan/spec.\n"
            )
        elif path.suffix in {".md", ".txt"}:
            content = (
                f"<!-- AUTO-GENERATED HEADER -->\n\n{header}\n\n"
                f"{spec}\n"
            )
        elif path.suffix in {".yml", ".yaml"}:
            content = (
                f"# {header.replace(chr(10), ' ')}\n"
                f"# TODO: Fill workflow/config per plan.\n"
            )
        elif path.suffix == ".json":
            content = json.dumps({"_generated": True, "task_id": task_id, "purpose": purpose}, indent=2)
        else:  # .sh or others
            content = f"#!/usr/bin/env bash\n\n# {purpose}\n\n# TODO: Implement per spec\n"
    else:
        # Fallback plain text
        content = header + spec

    path.write_text(content, encoding="utf-8")
    # Make scripts executable
    if path.suffix == ".sh":
        try:
            mode = path.stat().st_mode
            path.chmod(mode | 0o111)
        except Exception:
            pass


def main(argv: List[str]) -> int:
    root = Path(".")
    plan_path = root / "handoff" / "plan.json"
    spec_path = root / "handoff" / "spec.md"

    plan = load_plan(plan_path)
    spec = load_spec(spec_path)

    task_id = str(plan.get("task_id", "unknown"))
    deliverables = plan.get("deliverables", [])
    if not isinstance(deliverables, list):
        raise RuntimeError("plan.deliverables must be a list")

    created: List[str] = []
    for item in deliverables:
        if not isinstance(item, dict):
            continue
        rel = item.get("path") or ""
        purpose = item.get("purpose") or ""
        if not rel:
            continue
        dest = root / rel
        ensure_file(dest, task_id, purpose, spec)
        created.append(str(dest))

    print("Generated/ensured files:\n" + "\n".join(created) if created else "No files to generate.")
    return 0


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))

